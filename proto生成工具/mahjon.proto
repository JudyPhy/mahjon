package pb;

/////////////////////////////////////////////////////////////
// define types

enum GameMode
{
    JoinRoom = 1;
	CreateRoom = 2;
	QuickEnter = 3;
}

enum BattleSide
{
	east = 1;
	south = 2;
	west = 3;
	north = 4;
	none = 5;
}

enum CardStatus
{
	noDeal = 1;
	inHand = 2;
	bePeng = 3;
	beGang = 4;
	discard = 5;
}

enum CardType
{
	Wan = 1;
	Tiao = 2;
	Tong = 3;
	None = 4;
}

enum ExchangeType
{
	ClockWise = 1;
	AntiClock = 2;
	Opposite = 3;
}

message LackCard
{
	required int32 playerId = 1;
	required CardType type = 2;
}

enum DisacardStatus
{
	default = 1;
	peng = 2;
	gang = 3;
	ting = 4;
}

message CardInfo
{
	required int32 playerId = 1;
	required int32 CardOid = 2;
	required int32 CardId = 3;
	required CardStatus Status = 4;
	optional bool fromOther = 5;
}

message BattlePlayerInfo
{
	required BattleSide side = 1;
	required bool isOwner = 2;
	required PlayerInfo player = 3;
}

message PlayerInfo
{
	required int32 oid = 1;
	required string nickName = 2;
	required string headIcon = 3;
	required int32 gold = 4;
	required int32 diamond = 5;
}

/////////////////////////////////////////////////////////////////////
message C2GSLogin
{
	required string account = 1;
    required string password = 2;
}

message GS2CLoginRet
{
	enum ErrorCode
	{
		SUCCESS = 1;
		ACCOUNT_ERROR = 2;
		PASSWORD_ERROR = 3;
		FAIL = 4;
	}
	required ErrorCode errorCode = 1;
	optional PlayerInfo playerInfo = 2;
}

message C2GSEnterGame
{
    required GameMode mode = 1;
	optional string roomId = 2;	
}

message GS2CEnterGameRet
{
	enum ErrorCode{
		SUCCESS = 1; 
		FAIL = 2;
		PLAYER_COUNT_LIMITE = 3; // 人满
	}
    required ErrorCode errorCode = 1;	
	required GameMode mode = 2;
	required string roomId = 3;
}

message GS2CUpdateRoomInfo
{
	enum Status{
		ADD = 1;
		REMOVE = 2;
		UPDATE = 3;
	}
    repeated BattlePlayerInfo player = 1;
	required Status status = 2;
}

message GS2CBattleStart
{
	required int32 dealerId = 1;
	repeated CardInfo cardList = 2;
}

message C2GSExchangeCard
{	
	repeated CardInfo cardList = 1;
}

message GS2CExchangeCardRet
{	
	enum ErrorCode{
		SUCCESS = 1; 
		FAIL = 2;
		FAIL_CARD_COUNT_ERROR = 3;
	}
	required ErrorCode errorCode = 1;
}

message GS2CUpdateCardInfoAfterExchange
{
	required ExchangeType type = 1;
    repeated CardInfo cardList = 2;
}

message C2GSSelectLack
{	
	required CardType type = 1;
}

message GS2CSelectLackRet
{
	repeated LackCard lackCard = 1;
}

message GS2CDiscardTimeOut
{
	required int32 playerId = 1;
}

message C2GSDiscard
{
	required int32 cardId = 1;
	required DisacardStatus status = 2;
}

message GS2CDiscardRet
{
	enum ErrorCode{
		SUCCESS = 1; 
		FAIL = 2;
	}
	required ErrorCode errorCode = 1;
	repeated CardInfo card = 2;
}

message GS2CDealCard
{
	required int32 playerId = 1;
	required CardInfo card = 2;
}

message C2GSWin
{
	required int32 playerId = 1;
}

message GS2CWinRet
{
	required int32 playerId = 2;
}



